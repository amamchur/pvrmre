[HEADER]
	VERSION		00.00.00.00
	DESCRIPTION Basic Texturing
	COPYRIGHT	Imagination Technologies Ltd.
[/HEADER]

[TEXTURE]
	NAME M0Tex
	PATH "./textures/f_1_d.pvr"
	MINIFICATION LINEAR
	MAGNIFICATION LINEAR 
	MIPMAP NONE
	WRAP_T REPEAT
	WRAP_S REPEAT
[/TEXTURE]

[TEXTURE]
	NAME M0BTex
	PATH "./textures/f_1_nb.pvr"
	MINIFICATION LINEAR
	MAGNIFICATION LINEAR 
	MIPMAP NONE
	WRAP_T REPEAT
	WRAP_S REPEAT
[/TEXTURE]

[TEXTURE]
	NAME Wood0Tex
	PATH "./textures/w_1.pvr"
	MINIFICATION LINEAR
	MAGNIFICATION LINEAR 
	MIPMAP NONE
	WRAP_T REPEAT
	WRAP_S REPEAT
[/TEXTURE]

[TEXTURE]
	NAME Wood1Tex
	PATH "./textures/w_2.pvr"
	MINIFICATION LINEAR
	MAGNIFICATION LINEAR 
	MIPMAP NONE
	WRAP_T REPEAT
	WRAP_S REPEAT
[/TEXTURE]

[TEXTURE]
	NAME Wood2Tex
	PATH "./textures/w_3.pvr"
	MINIFICATION LINEAR
	MAGNIFICATION LINEAR 
	MIPMAP NONE
	WRAP_T REPEAT
	WRAP_S REPEAT
[/TEXTURE]

[TEXTURE]
	NAME Wood3Tex
	PATH "./textures/w_4.pvr"
	MINIFICATION LINEAR
	MAGNIFICATION LINEAR 
	MIPMAP NONE
	WRAP_T REPEAT
	WRAP_S REPEAT
[/TEXTURE]

[VERTEXSHADER]
	NAME VertShader
	
	[GLSL_CODE]
	attribute highp		vec3	inVertex;
	attribute highp 	vec2 	inTexCoord;
	attribute mediump	vec3	inNormal;

	uniform highp		mat4 	WorldViewProjection;
	uniform highp		mat4  	World;
	uniform mediump		vec3 	LightDir;
	uniform mediump		vec3  	EyePos;

	varying highp 		vec3	vDiff;
	varying highp 		vec3 	vSpec;
	varying highp 		vec2 	vTexCoord;

	void main(void)
	{
		mediump vec3 lightVec = -normalize(LightDir);
		mediump vec3 normal 	= normalize((World * vec4(inNormal, 0.0)).xyz);
		highp vec4 position = vec4(inVertex, 1.0);
		
		gl_Position = WorldViewProjection * position;
			
		mediump vec3 EyeVec = normalize(EyePos - position.xyz);		
		highp float NDotL = max(dot(normal, lightVec), 0.3);
			
		vDiff = vec3(NDotL);
		mediump vec3 vHalfVec = normalize(lightVec + EyeVec);
		mediump float HDotN	= max(0.0, dot(vHalfVec, normal));
		vSpec = vec3(min(pow(HDotN, 64.0), 0.5));	
		vTexCoord = inTexCoord;	
	}
	[/GLSL_CODE]
[/VERTEXSHADER]

[FRAGMENTSHADER]
	NAME FragShader

	[GLSL_CODE]
	uniform sampler2D sTexture;
	varying lowp vec3 vDiff;
	varying highp vec3 vSpec;
	varying highp vec2 vTexCoord;
	
	void main()
	{    
		lowp vec3 TexCol = texture2D(sTexture, vTexCoord).xyz;
		gl_FragColor = vec4(TexCol * (vDiff + vSpec), 1.0);
	}
	[/GLSL_CODE]
[/FRAGMENTSHADER]

[EFFECT] 
	NAME    M0

	ATTRIBUTE inVertex			POSITION
	ATTRIBUTE inNormal			NORMAL
	ATTRIBUTE inTexCoord		UV0

	UNIFORM WorldViewProjection		WORLDVIEWPROJECTION
	UNIFORM World									WORLD
	UNIFORM LightDir							LIGHTDIRWORLD0
	UNIFORM	EyePos								EYEPOSWORLD

	UNIFORM	sTexture			TEXTURE0
	TEXTURE 0 M0Tex

	FRAGMENTSHADER  FragShader
	VERTEXSHADER    VertShader
[/EFFECT]

[VERTEXSHADER]
	NAME WoodVertShader
	
	[GLSL_CODE]
	attribute highp		vec3	inVertex;
	attribute highp 	vec2 	inTexCoord;
	attribute mediump	vec3	inNormal;

	uniform highp		mat4 	WorldViewProjection;
	uniform highp		mat4  	World;
	uniform mediump		vec3 	LightDir;
	uniform mediump		vec3  	EyePos;

	uniform lowp		vec3 	AmbientMat;
	uniform lowp		vec3 	DiffuseMat;

	varying highp 		vec3	vDiff;
	varying highp 		vec3 	vSpec;
	varying highp 		vec2 	vTexCoord;

	void main(void)
	{
		mediump vec3 lightVec = -normalize(LightDir);
		mediump vec3 normal 	= normalize((World * vec4(inNormal, 0.0)).xyz);
		highp vec4 position = vec4(inVertex, 1.0);
		
		gl_Position = WorldViewProjection * position;
			
		mediump vec3 EyeVec = normalize(EyePos - position.xyz);		
		highp float NDotL = max(dot(normal, lightVec), 0.6);
			
		vDiff = DiffuseMat * NDotL;
		mediump vec3 vHalfVec = normalize(lightVec + EyeVec);
		mediump float HDotN	= max(0.0, dot(vHalfVec, normal));
		vSpec = vec3(max(pow(HDotN, 64.0), 0.5));		
		vTexCoord = inTexCoord;	
	}
	[/GLSL_CODE]
[/VERTEXSHADER]

[FRAGMENTSHADER]
	NAME WoodFragShader

	[GLSL_CODE]
	uniform sampler2D sTexture;
	varying highp vec3 vDiff;
	varying highp vec3 vSpec;
	varying highp vec2 vTexCoord;
	
	void main()
	{    
		lowp vec3 TexCol = texture2D(sTexture, vTexCoord).xyz;
		gl_FragColor = vec4(TexCol * (vDiff + vSpec), 1.0);
	}
	[/GLSL_CODE]
[/FRAGMENTSHADER]

[EFFECT] 
	NAME    Wood

	ATTRIBUTE inVertex			POSITION
	ATTRIBUTE inNormal			NORMAL
	ATTRIBUTE inTexCoord		UV0

	UNIFORM WorldViewProjection		WORLDVIEWPROJECTION
	UNIFORM World					WORLD
	UNIFORM LightDir				LIGHTDIRWORLD0
	UNIFORM	EyePos					EYEPOSWORLD

	UNIFORM	sTexture			TEXTURE0
	TEXTURE 0 Wood0Tex

	FRAGMENTSHADER  WoodFragShader
	VERTEXSHADER    WoodVertShader
[/EFFECT]

[VERTEXSHADER]
	NAME SelectedNodeVertShader
	[GLSL_CODE]
	attribute highp		vec3	inVertex;
	attribute mediump	vec3	inNormal;

	uniform highp		mat4 	WorldViewProjection;
	uniform highp		mat4  	World;

	varying highp 		vec3 	vNormal;
	varying highp 		vec3 	vPosition;
	
	void main(void)
	{
		mediump vec3 normal = normalize((World * vec4(inNormal, 0.0)).xyz);
		highp vec4 position = vec4(inVertex, 1.0);
		vNormal = normal;
		vPosition = position.xyz;
		gl_Position = WorldViewProjection * position;
	}
	[/GLSL_CODE]
[/VERTEXSHADER]

[FRAGMENTSHADER]
	NAME SelectedNodeFragShader
	[GLSL_CODE]
		uniform 			sampler2D sTexture;
		uniform highp 		float	Time;
		
		uniform mediump		vec3 	LightDir;
		uniform mediump		vec3  	EyePos;
		
		varying highp 		vec3 	vNormal;
		varying highp 		vec3 	vPosition;

		void main()	
		{
			mediump vec3 lightVec = -normalize(LightDir);
			mediump vec3 EyeVec = normalize(EyePos - vPosition);		
			mediump float NDotL = max(dot(vNormal, lightVec), 0.5);
			mediump vec3 vHalfVec = normalize(lightVec + EyeVec);
			mediump float HDotN	= max(0.0, dot(vHalfVec, vNormal));
			mediump float spec = pow(HDotN, 128.0);
		
			highp vec3 color = vec3(144.0 / 255.0, 230.0 / 255.0, 170.0 / 255.0);
			highp vec3 pulse = vec3(0.2) * abs(Time);
			color = color * max(NDotL, 0.3) + spec + pulse;
			gl_FragColor = vec4(color, 1.0);
		}
	[/GLSL_CODE]
[/FRAGMENTSHADER]

[EFFECT]
	NAME SelectedNode

	ATTRIBUTE inVertex				POSITION
	ATTRIBUTE inNormal				NORMAL

	UNIFORM WorldViewProjection		WORLDVIEWPROJECTION
	UNIFORM World					WORLD
	UNIFORM LightDir					LIGHTDIRWORLD0
	UNIFORM	EyePos					EYEPOSWORLD

	UNIFORM Time				TIMESIN

	VERTEXSHADER   SelectedNodeVertShader
	FRAGMENTSHADER SelectedNodeFragShader
[/EFFECT]

[VERTEXSHADER]
	NAME SelectionVertShader
	[GLSL_CODE]
	attribute highp		vec3	inVertex;

	uniform highp		mat4 	WorldViewProjection;
	uniform highp		vec3 	DiffuseMat;

	varying highp 		vec3	DiffColor;

	void main(void)
	{
		gl_Position = WorldViewProjection * vec4(inVertex, 1.0);
		DiffColor = DiffuseMat;
	}
	[/GLSL_CODE]
[/VERTEXSHADER]

[FRAGMENTSHADER]
	NAME SelectionFragShader
	[GLSL_CODE]
		varying highp vec3 DiffColor;
		void main()	
		{
			gl_FragColor = vec4(DiffColor, 1.0);
		}
	[/GLSL_CODE]
[/FRAGMENTSHADER]

[EFFECT]
	NAME Selection

	ATTRIBUTE inVertex				POSITION

	UNIFORM WorldViewProjection		WORLDVIEWPROJECTION
	UNIFORM DiffuseMat				MATERIALCOLORDIFFUSE

	VERTEXSHADER   SelectionVertShader
	FRAGMENTSHADER SelectionFragShader
[/EFFECT]