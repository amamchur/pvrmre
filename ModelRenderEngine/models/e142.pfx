[HEADER]
	VERSION		00.00.00.00
	DESCRIPTION Fast Transformation and Lighting Example
	COPYRIGHT	Imagination Technologies Ltd.
[/HEADER]

[TEXTURES]
	FILE woodTexture 	textures/generics_epoca_senza.pvr		LINEAR-LINEAR-NONE
	FILE clothTexture 	textures/st263.pvr						LINEAR-LINEAR-NONE
[/TEXTURES]

[VERTEXSHADER]
	NAME VertShader
	[GLSL_CODE]
	attribute highp		vec3	inVertex;
	attribute highp 		vec2 	inTexCoord;
	attribute mediump	vec3	inNormal;

	uniform highp		mat4 	WorldViewProjection;
	uniform highp		mat4  	World;
	uniform mediump		vec3 	LightDir;
	uniform mediump		vec3  	EyePos;

	uniform lowp			vec3 	AmbientMat;
	uniform lowp			vec3 	DiffuseMat;
	uniform lowp			vec3 	SpecMat;
	uniform lowp			float	SpecPow;

	varying lowp 		vec3	vDiff;
	varying lowp 		vec3 	vAmb;
	varying lowp 		vec3 	vSpec;
	varying highp 		vec2 	vTexCoord;

	void main(void)
	{
		mediump vec3 lightVec = -normalize(LightDir);
		mediump vec3 normal 	= normalize((World * vec4(inNormal, 0.0)).xyz);
		highp vec4 position = vec4(inVertex, 1.0);
		
		gl_Position = WorldViewProjection * position;
			
		mediump vec3 EyeVec = normalize(EyePos - position.xyz);		
		highp float NDotL = max(dot(normal, lightVec), 0.3);
			
		vDiff = DiffuseMat * NDotL;
		mediump vec3 vHalfVec = normalize(lightVec + EyeVec);
		mediump float HDotN	= max(0.0, dot(vHalfVec, normal));
		mediump float fSpecPow = SpecPow * 100.0; // 0.0 - 1.0 expand
		vSpec = SpecMat * pow(HDotN, fSpecPow);
		vAmb = AmbientMat;			
		vTexCoord = inTexCoord;	
	}
	[/GLSL_CODE]
[/VERTEXSHADER]

[FRAGMENTSHADER]
	NAME FragShader
	[GLSL_CODE]
	uniform sampler2D sTexture;
	varying lowp vec3 vDiff;
	varying lowp vec3 vAmb;
	varying lowp vec3 vSpec;
	varying highp vec2 vTexCoord;
	
	void main()
	{    
		lowp vec3 TexCol = texture2D(sTexture, vTexCoord).xyz;
		gl_FragColor = vec4(TexCol * vDiff + vSpec, 1.0);
	}
	[/GLSL_CODE]
[/FRAGMENTSHADER]

[EFFECT]
	NAME FastTnL

	ATTRIBUTE inVertex			POSITION
	ATTRIBUTE inNormal			NORMAL
	ATTRIBUTE inTexCoord		UV0

	UNIFORM WorldViewProjection		WORLDVIEWPROJECTION
	UNIFORM World									WORLD
	UNIFORM LightDir							LIGHTDIRWORLD0
	UNIFORM	EyePos								EYEPOSWORLD

	UNIFORM AmbientMat		MATERIALCOLORAMBIENT
	UNIFORM DiffuseMat		MATERIALCOLORDIFFUSE
	UNIFORM SpecMat				MATERIALCOLORSPECULAR
	UNIFORM SpecPow				MATERIALSHININESS
	UNIFORM	sTexture			TEXTURE0
	TEXTURE 0 woodTexture

	VERTEXSHADER   VertShader
	FRAGMENTSHADER FragShader
[/EFFECT]

[EFFECT]
	NAME Cloth

	ATTRIBUTE inVertex			POSITION
	ATTRIBUTE inNormal			NORMAL
	ATTRIBUTE inTexCoord		UV0

	UNIFORM WorldViewProjection		WORLDVIEWPROJECTION
	UNIFORM World									WORLD
	UNIFORM LightDir							LIGHTDIRWORLD0
	UNIFORM	EyePos								EYEPOSWORLD

	UNIFORM AmbientMat		MATERIALCOLORAMBIENT
	UNIFORM DiffuseMat		MATERIALCOLORDIFFUSE
	UNIFORM SpecMat				MATERIALCOLORSPECULAR
	UNIFORM SpecPow				MATERIALSHININESS
	UNIFORM	sTexture			TEXTURE0
	TEXTURE 0 clothTexture

	VERTEXSHADER   VertShader
	FRAGMENTSHADER FragShader
[/EFFECT]

[FRAGMENTSHADER]
	NAME SelectedNodeFragShader
	[GLSL_CODE]
		uniform sampler2D sTexture;
		varying lowp vec3 vDiff;
		varying lowp vec3 vAmb;
		varying lowp vec3 vSpec;
		varying highp vec2 vTexCoord;
		void main()	
		{
			lowp vec3 color = vec3 (0.0, 1.0, 0.0);
			gl_FragColor = vec4(color * vDiff + vSpec, 1.0);
		}
	[/GLSL_CODE]
[/FRAGMENTSHADER]

[EFFECT]
	NAME SelectedNode

	ATTRIBUTE inVertex			POSITION
	ATTRIBUTE inNormal			NORMAL
	ATTRIBUTE inTexCoord			UV0

	UNIFORM WorldViewProjection		WORLDVIEWPROJECTION
	UNIFORM World					WORLD
	UNIFORM LightDir					LIGHTDIRWORLD0
	UNIFORM	EyePos					EYEPOSWORLD

	UNIFORM AmbientMat		MATERIALCOLORAMBIENT
	UNIFORM DiffuseMat		MATERIALCOLORDIFFUSE
	UNIFORM SpecMat				MATERIALCOLORSPECULAR
	UNIFORM SpecPow				MATERIALSHININESS

	VERTEXSHADER   VertShader
	FRAGMENTSHADER SelectedNodeFragShader
[/EFFECT]

[VERTEXSHADER]
	NAME SelectionVertShader
	[GLSL_CODE]
	attribute highp		vec3	inVertex;

	uniform highp		mat4 	WorldViewProjection;
	uniform highp		vec3 	DiffuseMat;

	varying highp 		vec3	DiffColor;

	void main(void)
	{
		gl_Position = WorldViewProjection * vec4(inVertex, 1.0);
		DiffColor = DiffuseMat;
	}
	[/GLSL_CODE]
[/VERTEXSHADER]

[FRAGMENTSHADER]
	NAME SelectionFragShader
	[GLSL_CODE]
		varying highp vec3 DiffColor;
		void main()	
		{
			gl_FragColor = vec4(DiffColor, 1.0);
		}
	[/GLSL_CODE]
[/FRAGMENTSHADER]

[EFFECT]
	NAME Selection

	ATTRIBUTE inVertex				POSITION

	UNIFORM WorldViewProjection		WORLDVIEWPROJECTION
	UNIFORM DiffuseMat				MATERIALCOLORDIFFUSE

	VERTEXSHADER   SelectionVertShader
	FRAGMENTSHADER SelectionFragShader
[/EFFECT]

[VERTEXSHADER]
	NAME TestVertShader
	[GLSL_CODE]
		attribute highp   vec4  inVertex;
		attribute mediump vec3  inNormal;
		attribute mediump vec2  inTexCoord;
		
		uniform highp   mat4  MVPMatrix;
		uniform mediump vec3  LightPos;
		
		varying lowp    float  DiffuseIntensity;
		varying lowp    float  SpecularIntensity;
		varying mediump vec2   TexCoord;
		
		void main()
		{
			gl_Position = MVPMatrix * inVertex;
			
			mediump vec3 LightDirection = normalize(LightPos - inVertex.xyz);
			DiffuseIntensity = dot(inNormal, LightDirection);
			SpecularIntensity = max((DiffuseIntensity - 0.99) * 2.0, 0.0);
			
			TexCoord = inTexCoord;
		}
	[/GLSL_CODE]
[/VERTEXSHADER]

[FRAGMENTSHADER]
	NAME TestFragShader
	[GLSL_CODE]
		varying lowp    float  DiffuseIntensity;
		varying lowp    float  SpecularIntensity;
		varying mediump vec2   TexCoord;
					
		void main()	
		{
			gl_FragColor = vec4(0.5, 0.6, 0.7, 1.0) * DiffuseIntensity;// + SpecularIntensity;
		}
	[/GLSL_CODE]
[/FRAGMENTSHADER]

[EFFECT]
	NAME TestFastTnL

	ATTRIBUTE	inVertex			POSITION
	ATTRIBUTE	inNormal			NORMAL
	ATTRIBUTE	inTexCoord		UV
	UNIFORM		MVPMatrix		WORLDVIEWPROJECTION
	UNIFORM		LightPos 		LIGHTPOSMODEL0
	UNIFORM		diffColor		MATERIALCOLORDIFFUSE	

	VERTEXSHADER   TestVertShader
	FRAGMENTSHADER TestFragShader
[/EFFECT]
