[HEADER]
	VERSION		00.00.00.00
	DESCRIPTION Anisotropic Lighting Example
	COPYRIGHT	Imagination Technologies Ltd.
[/HEADER]

[TEXTURES]
[/TEXTURES]

[VERTEXSHADER]
	NAME VertShader
	[GLSL_CODE]
		attribute highp   vec3  inVertex;
		attribute mediump vec3  inNormal;
		
		uniform highp   mat4  MVPMatrix;
		uniform mediump mat3  ModelViewIT;
		uniform mediump vec3  LightPos;
		uniform mediump vec3  EyePos;
		
		varying lowp float  DiffuseIntensity;
		varying lowp float  SpecularIntensity;
		
		const lowp vec3  cGrainDirection = vec3(0.4, 0.9, 0.0);
		
		void main()
		{
			gl_Position = MVPMatrix * vec4(inVertex, 1.0);
			mediump vec3 transNormal = normalize(ModelViewIT * inNormal);
			
			mediump vec3 LightDirection = LightPos - inVertex;
		
			mediump vec3 normalXgrain = cross(transNormal, cGrainDirection);
			mediump vec3 tangent = normalize(cross(normalXgrain, transNormal));
			mediump float LdotT = dot(tangent, normalize(LightDirection));
			mediump float VdotT = dot(tangent, normalize(EyePos));
		
			mediump float NdotL = sqrt(1.0 - LdotT * LdotT);
			mediump float VdotR = NdotL * sqrt(1.0 - VdotT * VdotT) - VdotT * LdotT;
		
			DiffuseIntensity = max(NdotL * 0.4 + 0.6, 0.0);
			SpecularIntensity = max(VdotR * VdotR * 0.9, 0.0);
		}
	[/GLSL_CODE]
[/VERTEXSHADER]

[FRAGMENTSHADER]
	NAME FragShader	
	[GLSL_CODE]
		varying lowp float  DiffuseIntensity;
		varying lowp float  SpecularIntensity;
		
		const lowp vec3  cBaseColor = vec3(0.1, 0.1, 0.1);
		
		void main()
		{
			lowp vec3 color = (cBaseColor * DiffuseIntensity) + SpecularIntensity;
			gl_FragColor = vec4(color, 1.0);
		}
	[/GLSL_CODE]
[/FRAGMENTSHADER]
 
[EFFECT] 
	NAME AnisotropicLighting
	
	ATTRIBUTE	inVertex			POSITION
	ATTRIBUTE	inNormal			NORMAL
	
	UNIFORM		MVPMatrix			WORLDVIEWPROJECTION
	UNIFORM		ModelViewIT			WORLDVIEWIT
	UNIFORM		LightPos			LIGHTPOSWORLD0
	UNIFORM		EyePos				EYEPOSWORLD

	FRAGMENTSHADER FragShader
	VERTEXSHADER VertShader
[/EFFECT]