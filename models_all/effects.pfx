[HEADER]
	VERSION		00.00.00.00
	DESCRIPTION Basic Lighting
	COPYRIGHT	Imagination Technologies Ltd.
[/HEADER]

[TEXTURES]
	FILE WoodTexture 	textures/generics_epoca_senza.pvr		LINEAR-LINEAR-NONE
	FILE ClothTexture 	textures/st263.pvr						LINEAR-LINEAR-NONE
	FILE SkinTexture 	textures/frag_tex_1.pvr		
	FILE MetalTexture 	textures/old_silver.pvr		
	
	FILE BaseTexture 	textures/frag_tex_1.pvr				LINEAR-LINEAR-NONE
	FILE NormalTexture	textures/frag_tex_1_normal.pvr		LINEAR-LINEAR-NONE
[/TEXTURES]

[VERTEXSHADER]
	NAME VertShader
	
	[GLSL_CODE]
	attribute highp		vec3	inVertex;
	attribute highp		vec3	inNormal;
	attribute highp 	vec2 	inTexCoord;

	uniform highp		mat4 	MVPMatrix;
	uniform highp		mat4  	World;
	uniform mediump		vec3 	LightDir;
	uniform mediump		vec3  	EyePos;

	uniform lowp		vec3 	AmbientMat;
	uniform lowp		vec3 	DiffuseMat;
	uniform lowp		vec3 	SpecMat;
	uniform lowp		float 	SpecPow;

	varying lowp 	vec3 vDiff;
	varying lowp 	vec3 vAmb;
	varying lowp 	vec3 vSpec;
	varying highp 	vec2 vTexCoord;

	void main(void)
	{
		mediump vec3 lightVec = -normalize(LightDir);
		mediump vec3 normal = normalize((World * vec4(inNormal, 0.0)).xyz);
		highp vec4 position = vec4(inVertex, 1.0);
		
		gl_Position = MVPMatrix * position;
			
		mediump vec3 EyeVec = normalize(EyePos - position.xyz);		
		highp float NDotL = max(dot(normal, lightVec), 0.0);
			
		mediump vec3 vHalfVec = normalize(lightVec + EyeVec);
		mediump float HDotN = max(0.0, dot(vHalfVec, normal));
		mediump float fSpecPow 	= 160.0; // 0.0 - 1.0 expand
		vDiff = vec3(1.0) * NDotL;
		vSpec = vec3(1.0) * pow(HDotN, fSpecPow);
		vAmb = AmbientMat;
		vTexCoord = inTexCoord;		
	}
	[/GLSL_CODE]
[/VERTEXSHADER]

[FRAGMENTSHADER]
	NAME ClothFragShader

	[GLSL_CODE]
	uniform sampler2D sTexture;
	
	varying lowp 	vec3 vDiff;
	varying lowp 	vec3 vAmb;
	varying lowp 	vec3 vSpec;
	varying highp 	vec2 vTexCoord;
	void main()
	{    		
		lowp vec3 TexCol = texture2D(sTexture, vTexCoord).xyz;
 		const highp vec3 LightColor = vec3(0.5);
		gl_FragColor = vec4(TexCol * max(vDiff, 0.3), 1.0);
	}
	[/GLSL_CODE]
[/FRAGMENTSHADER]

[FRAGMENTSHADER]
	NAME WoodFragShader

	[GLSL_CODE]
	uniform sampler2D sTexture;
	
	varying lowp 	vec3 vDiff;
	varying lowp 	vec3 vAmb;
	varying lowp 	vec3 vSpec;
	varying highp 	vec2 vTexCoord;
	void main()
	{    		
		lowp vec3 TexCol = texture2D(sTexture, vTexCoord).xyz;
		gl_FragColor = vec4(TexCol * max(vDiff, 0.95) + vSpec, 1.0);
	}
	[/GLSL_CODE]
[/FRAGMENTSHADER]

[FRAGMENTSHADER]
	NAME SkinFragShader

	[GLSL_CODE]
	uniform sampler2D sTexture;
	
	varying lowp 	vec3 vDiff;
	varying lowp 	vec3 vAmb;
	varying lowp 	vec3 vSpec;
	varying highp 	vec2 vTexCoord;
	void main()
	{    		
		lowp vec3 TexCol = texture2D(sTexture, vTexCoord).xyz;
		gl_FragColor = vec4(TexCol * max(vDiff, 0.3) + vSpec, 1.0);
	}
	[/GLSL_CODE]
[/FRAGMENTSHADER]

[FRAGMENTSHADER]
	NAME MetalFragShader

	[GLSL_CODE]
	uniform sampler2D sTexture;
	
	varying lowp 	vec3 vDiff;
	varying lowp 	vec3 vAmb;
	varying lowp 	vec3 vSpec;
	varying highp 	vec2 vTexCoord;
	void main()
	{    		
		lowp vec3 TexCol = texture2D(sTexture, vTexCoord).xyz;
		gl_FragColor = vec4(TexCol + vSpec * vec3(1.0), 1.0);
	}
	[/GLSL_CODE]
[/FRAGMENTSHADER]

[EFFECT] 
	NAME    ClothEffect

	ATTRIBUTE inVertex				POSITION
	ATTRIBUTE inNormal				NORMAL
	ATTRIBUTE inTexCoord			UV0

	UNIFORM MVPMatrix				WORLDVIEWPROJECTION
	UNIFORM World					WORLD
	UNIFORM LightDir				LIGHTDIRWORLD0
	UNIFORM	EyePos					EYEPOSWORLD

	UNIFORM AmbientMat				MATERIALCOLORAMBIENT
	UNIFORM DiffuseMat				MATERIALCOLORDIFFUSE
	UNIFORM SpecMat					MATERIALCOLORSPECULAR
	UNIFORM SpecPow					MATERIALSHININESS

	UNIFORM	sTexture				TEXTURE0
	TEXTURE 0 ClothTexture
	
	FRAGMENTSHADER  ClothFragShader
	VERTEXSHADER    VertShader
[/EFFECT]

[EFFECT] 
	NAME    SkinEffect

	ATTRIBUTE inVertex				POSITION
	ATTRIBUTE inNormal				NORMAL
	ATTRIBUTE inTexCoord			UV0

	UNIFORM MVPMatrix				WORLDVIEWPROJECTION
	UNIFORM World					WORLD
	UNIFORM LightDir				LIGHTDIRWORLD0
	UNIFORM	EyePos					EYEPOSWORLD

	UNIFORM AmbientMat				MATERIALCOLORAMBIENT
	UNIFORM DiffuseMat				MATERIALCOLORDIFFUSE
	UNIFORM SpecMat					MATERIALCOLORSPECULAR
	UNIFORM SpecPow					MATERIALSHININESS

	UNIFORM	sTexture				TEXTURE0
	TEXTURE 0 SkinTexture
	
	FRAGMENTSHADER  SkinFragShader
	VERTEXSHADER    VertShader
[/EFFECT]

[EFFECT] 
	NAME    WoodEffect

	ATTRIBUTE inVertex				POSITION
	ATTRIBUTE inNormal				NORMAL
	ATTRIBUTE inTexCoord			UV0

	UNIFORM MVPMatrix				WORLDVIEWPROJECTION
	UNIFORM World					WORLD
	UNIFORM LightDir				LIGHTDIRWORLD0
	UNIFORM	EyePos					EYEPOSWORLD

	UNIFORM AmbientMat				MATERIALCOLORAMBIENT
	UNIFORM DiffuseMat				MATERIALCOLORDIFFUSE
	UNIFORM SpecMat					MATERIALCOLORSPECULAR
	UNIFORM SpecPow					MATERIALSHININESS

	UNIFORM	sTexture				TEXTURE0
	TEXTURE 0 WoodTexture
	
	FRAGMENTSHADER  WoodFragShader
	VERTEXSHADER    VertShader
[/EFFECT]

[EFFECT] 
	NAME    MetalEffect

	ATTRIBUTE inVertex				POSITION
	ATTRIBUTE inNormal				NORMAL
	ATTRIBUTE inTexCoord			UV0

	UNIFORM MVPMatrix				WORLDVIEWPROJECTION
	UNIFORM World					WORLD
	UNIFORM LightDir				LIGHTDIRWORLD0
	UNIFORM	EyePos					EYEPOSWORLD

	UNIFORM AmbientMat				MATERIALCOLORAMBIENT
	UNIFORM DiffuseMat				MATERIALCOLORDIFFUSE
	UNIFORM SpecMat					MATERIALCOLORSPECULAR
	UNIFORM SpecPow					MATERIALSHININESS

	UNIFORM	sTexture				TEXTURE0
	TEXTURE 0 MetalTexture
	
	FRAGMENTSHADER  MetalFragShader
	VERTEXSHADER    VertShader
[/EFFECT]

[VERTEXSHADER]	
	NAME BumpVertShader	
	[GLSL_CODE]	
		attribute highp   vec3  inVertex;
		attribute mediump vec3  inNormal;
		attribute mediump vec2  inTexCoord;
		attribute mediump vec3  inTangent;
		
		uniform mediump mat4  MVPMatrix;		// model view projection transformation
		uniform mediump vec3  LightPosition;	// Light position (point light) in model space
		uniform mediump vec3  EyePos;
		
		varying mediump vec3  vLightVec;
		varying mediump vec3  vEyeVec;
		varying mediump vec3  vNormal;
		varying mediump vec2  vTexCoord;
		
		void main()
		{
			// Transform position
			gl_Position = MVPMatrix * vec4(inVertex, 1.0);
			
			// Calculate light direction from light position in model space
			// You can skip this step for directional lights
			mediump vec3 lightDirection = normalize(LightPosition - inVertex);
			mediump vec3 EyeVec = normalize(EyePos - inVertex);
			
			// transform light direction from model space to tangent space
			mediump vec3 binormal = cross(inNormal, inTangent);
			mediump mat3 tangentSpaceXform = mat3(inTangent, binormal, inNormal);
			
			vLightVec = lightDirection * tangentSpaceXform;			
			vEyeVec = EyeVec;
			vTexCoord = inTexCoord;
			vNormal = inNormal;
		}
	[/GLSL_CODE]
[/VERTEXSHADER]	

[FRAGMENTSHADER]	
	NAME BumpFragShader	
	[GLSL_CODE]	
		uniform sampler2D  sBaseTex;
		uniform sampler2D  sNormalMap;
				
		varying mediump vec3  vLightVec;
		varying mediump vec3  vEyeVec;
		varying mediump vec3  vNormal;
		varying mediump vec2  vTexCoord;
		
		void main()
		{
			mediump vec3 normal = texture2D(sNormalMap, vTexCoord).rbg * 2.0 - 1.0;
			mediump vec3 lightVec = normalize(vLightVec);
		
			// read base texture and modulate with light intensity
			mediump float NDotL = max(dot(normal, lightVec), 0.0);
			mediump vec3 texColor = texture2D(sBaseTex, vTexCoord).rgb;
			mediump vec3 DiffColor = texColor * max(NDotL, 0.1);
			
			mediump vec3 eyeVec = normalize(vEyeVec);
			mediump vec3 vHalfVec = normalize(lightVec + eyeVec);
			mediump float HDotN = max(0.0, dot(vHalfVec, vNormal));
			mediump vec3 Spec = vec3(0.3) * pow(HDotN, 128.0);
			
			gl_FragColor = vec4(DiffColor, 1.0);
		}		
	[/GLSL_CODE]
[/FRAGMENTSHADER]

[EFFECT]
	NAME Bumpmapping

	ATTRIBUTE	inVertex		POSITION
	ATTRIBUTE	inNormal		NORMAL
	ATTRIBUTE	inTexCoord		UV
	ATTRIBUTE	inTangent		TANGENT
	
	UNIFORM		MVPMatrix		WORLDVIEWPROJECTION
	UNIFORM		LightPosition	LIGHTPOSMODEL0
	UNIFORM		EyePos			EYEPOSWORLD
	
	UNIFORM		sBaseTex		TEXTURE0	
	UNIFORM		sNormalMap		TEXTURE1
		
	TEXTURE 0 BaseTexture
	TEXTURE 1 NormalTexture

	VERTEXSHADER 	BumpVertShader
	FRAGMENTSHADER 	BumpFragShader	
[/EFFECT]

// ----- PointVertShader -----

[VERTEXSHADER]
	NAME PointVertShader
	[GLSL_CODE]
		attribute highp   vec3  inVertex; 
		attribute mediump vec3  inNormal;
		attribute mediump vec2  inTexCoord;
		
		uniform highp   mat4  MVPMatrix;
		uniform highp   mat4  ModelView;
		uniform mediump mat3  ModelViewIT;
		uniform highp   vec3  LightPosition;
		uniform lowp    vec3  LightColor;
		
		varying mediump vec2  TexCoord;
		varying lowp    vec3  DiffuseLight;
		varying lowp    vec3  SpecularLight;
		
		const mediump float  cShininess = 16.0;

		void main()
		{
			mediump vec3 normal = normalize(ModelViewIT * inNormal);
			highp vec3 ecPosition = vec3(ModelView * vec4(inVertex, 1.0));
			
			// initalize light intensity varyings
			DiffuseLight = vec3(0.0);
			SpecularLight = vec3(0.0);
			

			mediump vec3 lightDir = -normalize(ecPosition - LightPosition);
			mediump vec3 eyeDir = -normalize(ecPosition);
			
			lowp float NdotL = max(dot(normal, lightDir), 0.0);
			DiffuseLight += NdotL * LightColor;
			
			if (NdotL > 0.0)
			{
				mediump vec3 halfVector = normalize(lightDir + eyeDir);
				lowp float NdotH = max(dot(normal, halfVector), 0.0);		
				lowp float specular = pow(NdotH, cShininess);
				SpecularLight += specular * LightColor;
			}
			
			gl_Position = MVPMatrix * vec4(inVertex, 1.0);
		}
	[/GLSL_CODE]
[/VERTEXSHADER]

[FRAGMENTSHADER]
	NAME PointFragShader
	[GLSL_CODE]
		uniform lowp	vec3 	AmbientMat;
		uniform lowp	vec3 	DiffuseMat;
	
		varying lowp    vec3  DiffuseLight;
		varying lowp    vec3  SpecularLight;
		
		void main()
		{
			lowp vec3 color = AmbientMat + (DiffuseMat * DiffuseLight) + SpecularLight;
			gl_FragColor = vec4(color, 1.0);
		}
	[/GLSL_CODE]
[/FRAGMENTSHADER]
	
[EFFECT]
	NAME PointLighting

	ATTRIBUTE	inVertex		POSITION
	ATTRIBUTE	inNormal		NORMAL
	
	UNIFORM		MVPMatrix		WORLDVIEWPROJECTION
	UNIFORM		ModelView		WORLDVIEW
	UNIFORM		ModelViewIT		WORLDVIEWIT
	UNIFORM 	AmbientMat		MATERIALCOLORAMBIENT
	UNIFORM 	DiffuseMat		MATERIALCOLORDIFFUSE
	UNIFORM		LightPosition	LIGHTPOSEYE0
	UNIFORM		LightColor		LIGHTCOLOR0

	VERTEXSHADER 	PointVertShader
	FRAGMENTSHADER 	PointFragShader
[/EFFECT]

// ----- Light Source -----
[VERTEXSHADER]
	NAME LightSourceVertShader
	[GLSL_CODE]
		attribute 	highp   vec3  inVertex; 
		uniform 	highp   mat4  MVPMatrix;

		void main()
		{
			gl_Position = MVPMatrix * vec4(inVertex, 1.0);
		}
	[/GLSL_CODE]
[/VERTEXSHADER]

[FRAGMENTSHADER]
	NAME LightSourceFragShader
	[GLSL_CODE]		
		void main()
		{
			gl_FragColor = vec4(1.0, 1.0, 0.9, 1.0);
		}
	[/GLSL_CODE]
[/FRAGMENTSHADER]
	
[EFFECT]
	NAME LightSource

	ATTRIBUTE	inVertex		POSITION
	
	UNIFORM		MVPMatrix		WORLDVIEWPROJECTION
	
	VERTEXSHADER 	LightSourceVertShader
	FRAGMENTSHADER 	LightSourceFragShader
[/EFFECT]